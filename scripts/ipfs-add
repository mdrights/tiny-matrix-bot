#!/usr/bin/env bash
# AUTHOR MDrights
# UPDATE 2019-08-19

regex='^!?ipfs-add( .*)?$'

if [ -n "$CONFIG" ]
then
    echo $regex
    exit 0
fi

URL="$1"
URL_FILE="${URL##*/}"
TMP=/tmp/csobot-ipfs
RES_FILE="/tmp/ipfs-gateway-result.log"
mkdir -p $TMP
ret=0
ret_final=0
HOME=/home/user
PATH=$HOME/bin/go-ipfs:/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin

#IPFS_GW=$(cat $RES_FILE 2>/dev/null |tail -n5)
IPFS_GW=$(cat $RES_FILE 2>/dev/null)
#[[ -z $IPFS_GW ]] && echo "Oops, the gateway list is blank!" && exit
[[ -z $IPFS_GW ]] && IPFS_GW="https://ipfs.eternum.io"

# Specify a file name if the url is not ended with a filename.
if [[ -z $URL_FILE ]]; then
	URL=${URL%?}
	URL_FILE="${URL##*/}"
fi

# Find out ipfs binary.
IPFS=$(/usr/bin/which ipfs 2>/dev/null)
if [[ -z $IPFS ]]; then
	IPFS=$HOME/go-ipfs/ipfs
fi

CURL=$(/usr/bin/which curl 2>/dev/null)
if [[ -z $CURL ]]; then
	echo "Oops, could not find cURL tool!"
	exit 1
fi
	
# Check if ipfs is running.
if ! (ps -ef |grep go-ipfs/ipfs |grep -v grep >/dev/null); then
	#($IPFS daemon) &
	#sleep 15
	echo "No ipfs daemon is running. Please start it."
	exit
fi

# Request the url.
echo ">> Downloading your webpage ..."
$CURL -L -o $TMP/$URL_FILE "$URL"  || ret=1
sleep 1

# IPFS add and pin!
if [[ $ret -eq 0 ]]; then
	echo ">> Adding and pinning it to IPFS..."
	FILE_HASH=$($IPFS add $TMP/$URL_FILE  | /usr/bin/head -n1 | /usr/bin/awk '{ print $2 }')
	#echo "Hash: $FILE_HASH"
	sleep 1
	#echo "$IPFS pin add $FILE_HASH"
	ret_pin=$($IPFS pin add $FILE_HASH) || ret_final=1
else
	echo "Oops, FAIL to download the webpage you request!"
	exit
fi

# Return the hash along with the gateway urls.
if [[ $ret_final -eq 0 ]]; then
	echo "==============================="
	echo -e "Congrats! The IPFS addresses of the webpage you request are:"
	for gw in $IPFS_GW; do
		echo "${gw}/ipfs/$FILE_HASH"
	done
	echo "==============================="
	exit
else
	echo "Oops, FAIL to pin the webpage you request!"
	exit
fi

